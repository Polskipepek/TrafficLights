#!/bin/bash -f
#*********************************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# Filename    : design_tf.sh
# Simulator   : Synopsys Verilog Compiler Simulator
# Description : Simulation script for compiling, elaborating and verifying the project source files.
#               The script will automatically create the design libraries sub-directories in the run
#               directory, add the library logical mappings in the simulator setup file, create default
#               'do/prj' file, execute compilation, elaboration and simulation steps.
#
# Generated by Vivado on Mon Jun 15 13:04:54 +0200 2020
# SW Build 2708876 on Wed Nov  6 21:40:23 MST 2019
#
# Copyright 1986-2019 Xilinx, Inc. All Rights Reserved. 
#
# usage: design_tf.sh [-help]
# usage: design_tf.sh [-lib_map_path]
# usage: design_tf.sh [-noclean_files]
# usage: design_tf.sh [-reset_run]
#
# Prerequisite:- To compile and run simulation, you must compile the Xilinx simulation libraries using the
# 'compile_simlib' TCL command. For more information about this command, run 'compile_simlib -help' in the
# Vivado Tcl Shell. Once the libraries have been compiled successfully, specify the -lib_map_path switch
# that points to these libraries and rerun export_simulation. For more information about this switch please
# type 'export_simulation -help' in the Tcl shell.
#
# You can also point to the simulation libraries by either replacing the <SPECIFY_COMPILED_LIB_PATH> in this
# script with the compiled library directory path or specify this path with the '-lib_map_path' switch when
# executing this script. Please type 'design_tf.sh -help' for more information.
#
# Additional references - 'Xilinx Vivado Design Suite User Guide:Logic simulation (UG900)'
#
#*********************************************************************************************************

# Directory path for design sources and include directories (if any) wrt this path
ref_dir="."

# Override directory with 'export_sim_ref_dir' env path value if set in the shell
if [[ (! -z "$export_sim_ref_dir") && ($export_sim_ref_dir != "") ]]; then
  ref_dir="$export_sim_ref_dir"
fi

# Command line options
vlogan_opts="-full64"
vhdlan_opts="-full64"
vcs_elab_opts="-full64 -debug_pp -t ps -licqueue -l elaborate.log"
vcs_sim_opts="-ucli -licqueue -l simulate.log"

# Design libraries
design_libs=(xil_defaultlib)

# Simulation root library directory
sim_lib_dir="vcs_lib"

# Script info
echo -e "design_tf.sh - Script generated by export_simulation (Vivado v2019.2 (64-bit)-id)\n"

# Main steps
run()
{
  check_args $# $1
  setup $1 $2
  compile
  elaborate
  simulate
}

# RUN_STEP: <compile>
compile()
{
  # Compile design files
  vlogan -work xil_defaultlib $vlogan_opts +v2k \
    "$ref_dir/../../../bd/design_tf/ipshared/5e38/src/CounterDesign.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/5e38/src/TrafficLightsDesign.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/5e38/src/TrafficLights.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_TrafficLights_0_0/sim/design_tf_TrafficLights_0_0.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/8b49/src/diode.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/8b49/src/diode_clock_divider.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/8b49/src/top_diode.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_diode_0_0/sim/design_tf_top_diode_0_0.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_diode_1_0/sim/design_tf_top_diode_1_0.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_diode_2_0/sim/design_tf_top_diode_2_0.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_diode_3_0/sim/design_tf_top_diode_3_0.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/2cf6/src/bin2digit2.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_bin2digit2_0_0/sim/design_tf_bin2digit2_0_0.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_bin2digit2_0_1/sim/design_tf_bin2digit2_0_1.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/d768/src/lightstoleds.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_lightstoleds_0_0/sim/design_tf_lightstoleds_0_0.v" \
  2>&1 | tee -a vlogan.log

  vhdlan -work xil_defaultlib $vhdlan_opts \
    "$ref_dir/../../../bd/design_tf/ipshared/7184/src/kcpsm6.vhd" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_kcpsm6_0_0/sim/design_tf_kcpsm6_0_0.vhd" \
  2>&1 | tee -a vhdlan.log

  vlogan -work xil_defaultlib $vlogan_opts +v2k \
    "$ref_dir/../../../bd/design_tf/ipshared/3e1b/src/decoder.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_decoder_0_0/sim/design_tf_decoder_0_0.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a0d1/src/mux2_1.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_mux2_1_0_0/sim/design_tf_mux2_1_0_0.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/e390/src/pamiec_procesora.PICO6.2k.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_pamiec_procesora_0_2/sim/design_tf_pamiec_procesora_0_2.v" \
    "$ref_dir/../../../bd/design_tf/sim/design_tf.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a8ae/src/BCD_control.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a8ae/src/BCD_to_cathodes.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a8ae/src/anode_control.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a8ae/src/refreshcounter.v" \
    "$ref_dir/../../../bd/design_tf/ipshared/a8ae/src/top_7LED.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_7LED_0_4/sim/design_tf_top_7LED_0_4.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_7LED_1_1/sim/design_tf_top_7LED_1_1.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_7LED_2_1/sim/design_tf_top_7LED_2_1.v" \
    "$ref_dir/../../../bd/design_tf/ip/design_tf_top_7LED_3_1/sim/design_tf_top_7LED_3_1.v" \
  2>&1 | tee -a vlogan.log


  vlogan -work xil_defaultlib $vlogan_opts +v2k \
    glbl.v \
  2>&1 | tee -a vlogan.log

}

# RUN_STEP: <elaborate>
elaborate()
{
  vcs $vcs_elab_opts xil_defaultlib.design_tf xil_defaultlib.glbl -o design_tf_simv
}

# RUN_STEP: <simulate>
simulate()
{
  ./design_tf_simv $vcs_sim_opts -do simulate.do
}

# STEP: setup
setup()
{
  case $1 in
    "-lib_map_path" )
      if [[ ($2 == "") ]]; then
        echo -e "ERROR: Simulation library directory path not specified (type \"./design_tf.sh -help\" for more information)\n"
        exit 1
      fi
      create_lib_mappings $2
    ;;
    "-reset_run" )
      reset_run
      echo -e "INFO: Simulation run files deleted.\n"
      exit 0
    ;;
    "-noclean_files" )
      # do not remove previous data
    ;;
    * )
      create_lib_mappings $2
  esac

  create_lib_dir

  # Add any setup/initialization commands here:-

  # <user specific commands>

}

# Define design library mappings
create_lib_mappings()
{
  file="synopsys_sim.setup"
  if [[ -e $file ]]; then
    if [[ ($1 == "") ]]; then
      return
    else
      rm -rf $file
    fi
  fi

  touch $file

  lib_map_path=""
  if [[ ($1 != "") ]]; then
    lib_map_path="$1"
  fi

  for (( i=0; i<${#design_libs[*]}; i++ )); do
    lib="${design_libs[i]}"
    mapping="$lib:$sim_lib_dir/$lib"
    echo $mapping >> $file
  done

  if [[ ($lib_map_path != "") ]]; then
    incl_ref="OTHERS=$lib_map_path/synopsys_sim.setup"
    echo $incl_ref >> $file
  fi
}

# Create design library directory paths
create_lib_dir()
{
  if [[ -e $sim_lib_dir ]]; then
    rm -rf $sim_lib_dir
  fi

  for (( i=0; i<${#design_libs[*]}; i++ )); do
    lib="${design_libs[i]}"
    lib_dir="$sim_lib_dir/$lib"
    if [[ ! -e $lib_dir ]]; then
      mkdir -p $lib_dir
    fi
  done
}

# Delete generated data from the previous run
reset_run()
{
  files_to_remove=(ucli.key design_tf_simv vlogan.log vhdlan.log compile.log elaborate.log simulate.log .vlogansetup.env .vlogansetup.args .vcs_lib_lock scirocco_command.log 64 AN.DB csrc design_tf_simv.daidir)
  for (( i=0; i<${#files_to_remove[*]}; i++ )); do
    file="${files_to_remove[i]}"
    if [[ -e $file ]]; then
      rm -rf $file
    fi
  done

  create_lib_dir
}

# Check command line arguments
check_args()
{
  if [[ ($1 == 1 ) && ($2 != "-lib_map_path" && $2 != "-noclean_files" && $2 != "-reset_run" && $2 != "-help" && $2 != "-h") ]]; then
    echo -e "ERROR: Unknown option specified '$2' (type \"./design_tf.sh -help\" for more information)\n"
    exit 1
  fi

  if [[ ($2 == "-help" || $2 == "-h") ]]; then
    usage
  fi
}

# Script usage
usage()
{
  msg="Usage: design_tf.sh [-help]\n\
Usage: design_tf.sh [-lib_map_path]\n\
Usage: design_tf.sh [-reset_run]\n\
Usage: design_tf.sh [-noclean_files]\n\n\
[-help] -- Print help information for this script\n\n\
[-lib_map_path <path>] -- Compiled simulation library directory path. The simulation library is compiled\n\
using the compile_simlib tcl command. Please see 'compile_simlib -help' for more information.\n\n\
[-reset_run] -- Recreate simulator setup files and library mappings for a clean run. The generated files\n\
from the previous run will be removed. If you don't want to remove the simulator generated files, use the\n\
-noclean_files switch.\n\n\
[-noclean_files] -- Reset previous run, but do not remove simulator generated files from the previous run.\n\n"
  echo -e $msg
  exit 1
}

# Launch script
run $1 $2
